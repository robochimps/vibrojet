"""Potential energy surface of H₂S.

This module provides a Python implementation of the  potential energy surface
from the manuscript:

A. A. A. Azzam, J. Tennyson, S. N. Yurchenko, O. V. Naumenko,
"ExoMol molecular line lists - XVI. The rotation-vibration spectrum of hot H2S",
MNRAS 460, 4063-4074 (2016).
https://doi.org/10.1093/mnras/stw1133

**Units:**
- Distances must be provided in Ångströms.
- Valence angle must be provided in radians.
- The output energy is given in inverse centimeters (cm⁻¹)

**Example energy levels (in cm⁻¹):**
1182.57, 2353.91, 2614.39, 2628.46, 3513.70, 3779.19,
3789.27, 4661.61, 4932.69, 4939.14, 5145.03, 5147.17,
5243.16, 5797.21, 6074.57, 6077.63, 6288.14, 6289.13,
6385.32, 6920.08, 7204.31, 7204.44

**Masses of atoms**
S = 31.97207070, H = 1.00782505
"""

import jax
from jax import config
from jax import numpy as jnp

config.update("jax_enable_x64", True)


@jax.jit
def poten(coords):
    params = [
        1.3359007e0,
        1.70400000e0,
        92.265883e0,
        0.80000000000000e06,
        0.80000000000000e05,
        0.13000000000000e02,
        0.55000000000000e01,
        0.00000000000000e00,
        0.25298724728304e01,
        0.76001446034650e01,
        0.19119869561968e05,
        -0.26337942369521e04,
        -0.34641383728936e03,
        0.37146640335080e05,
        0.10372456946123e04,
        -0.48366811961179e04,
        0.31178979423415e04,
        -0.12711176182111e04,
        -0.18726215609860e03,
        -0.11796148983875e04,
        0.47473763424544e04,
        -0.13610350468586e04,
        0.29144380025635e04,
        -0.50653357937930e04,
        -0.11097146714230e04,
        0.10375282984635e03,
        0.48047328722297e04,
        -0.14060018110572e03,
        0.22425353263397e04,
        0.17914500029660e04,
        -0.98184202293571e03,
        0.61294305063749e02,
        -0.27151696719548e04,
        0.26119013667838e04,
        -0.61703073530707e04,
        -0.48833736184025e04,
        0.10049289144454e04,
        0.28708061338852e03,
        0.67852017509792e04,
        -0.10489708631647e04,
        0.74727382498639e03,
        0.20496523413380e04,
        0.24807517966824e03,
        -0.19578362789532e04,
        0.70166633265091e02,
        0.51823676755422e04,
        -0.29736603824162e04,
        -0.39068887749886e04,
        0.22707809418082e04,
        0.23793551966211e05,
        -0.34932314882947e04,
        0.85923207392547e03,
        -0.11327987267957e05,
        0.37668571305335e03,
        -0.15953549707091e05,
        0.14890386471456e04,
        0.51484402685677e03,
        -0.54617014746870e04,
        -0.69943515992635e02,
        0.17427705522754e04,
        0.29147560120520e03,
        -0.33646004327917e04,
        -0.11202273117182e04,
        -0.38323335633188e03,
        0.26441151817245e04,
        0.19366049577246e04,
        0.38175718811604e04,
        0.30778367811357e04,
        -0.26353881747532e04,
        0.83999500575225e04,
        -0.52450951528119e04,
        -0.34729416630406e03,
        -0.50050684462558e04,
        -0.28211904320344e04,
        -0.10580696087439e05,
        0.53782996209764e04,
        -0.99734750908249e03,
        -0.74046834718425e03,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
        0.00000000000000e00,
    ]

    r12, r32, alpha = coords.T
    re12 = params[0]
    aa1 = params[1]
    alphae = params[2] * jnp.pi / 180.0
    force = [0.0] + [p for p in params[3:]]

    b1 = force[1]
    b2 = force[2]
    g1 = force[3]
    g2 = force[4]

    rhh = jnp.sqrt(r12**2 + r32**2 - 2 * r12 * r32 * jnp.cos(alpha))
    vhh = b1 * jnp.exp(-g1 * rhh) + b2 * jnp.exp(-g2 * rhh**2)

    y1 = 1.0 - jnp.exp(-aa1 * (r12 - re12))
    y2 = 1.0 - jnp.exp(-aa1 * (r32 - re12))
    y3 = jnp.cos(alpha) - jnp.cos(alphae)

    v0 = force[5]

    y1_ = [y1**i for i in range(1,9)]
    y2_ = [y2**i for i in range(1,9)]
    y3_ = [y3**i for i in range(1,9)]

    v1 = force[6] * y3_[0] + force[7] * y1_[0] + force[7] * y2_[0]
    
    v2 = (
        force[8] * y3_[1]
        + force[9] * y1_[0] * y3_[0]
        + force[9] * y2_[0] * y3_[0]
        + force[10] * y1_[0] * y2_[0]
        + force[11] * y1_[1]
        + force[11] * y2_[1]
    )

    v3 = (
        force[12] * y3_[2]
        + force[13] * y1_[0] * y3_[1]
        + force[13] * y2_[0] * y3_[1]
        + force[14] * y1_[0] * y2_[0] * y3_[0]
        + force[15] * y1_[1] * y3_[0]
        + force[15] * y2_[1] * y3_[0]
        + force[16] * y1_[1] * y2_[0]
        + force[16] * y1_[0] * y2_[1]
        + force[17] * y1_[2]
        + force[17] * y2_[2]
    )

    v4 = (
        force[18] * y3_[3]
        + force[19] * y1_[0] * y3_[2]
        + force[19] * y2_[0] * y3_[2]
        + force[20] * y1_[0] * y2_[0] * y3_[1]
        + force[21] * y1_[1] * y3_[1]
        + force[21] * y2_[1] * y3_[1]
        + force[22] * y1_[1] * y2_[0] * y3_[0]
        + force[22] * y1_[0] * y2_[1] * y3_[0]
        + force[23] * y1_[1] * y2_[1]
        + force[24] * y1_[2] * y3_[0]
        + force[24] * y2_[2] * y3_[0]
        + force[25] * y1_[2] * y2_[0]
        + force[25] * y1_[0] * y2_[2]
        + force[26] * y1_[3]
        + force[26] * y2_[3]
    )

    v5 = (
        force[27] * y3_[4]
        + force[28] * y1_[0] * y3_[3]
        + force[28] * y2_[0] * y3_[3]
        + force[29] * y1_[0] * y2_[0] * y3_[2]
        + force[30] * y1_[1] * y3_[2]
        + force[30] * y2_[1] * y3_[2]
        + force[31] * y1_[1] * y2_[0] * y3_[1]
        + force[31] * y1_[0] * y2_[1] * y3_[1]
        + force[32] * y1_[1] * y2_[1] * y3_[0]
        + force[33] * y1_[2] * y3_[1]
        + force[33] * y2_[2] * y3_[1]
        + force[34] * y1_[2] * y2_[0] * y3_[0]
        + force[34] * y1_[0] * y2_[2] * y3_[0]
        + force[35] * y1_[2] * y2_[1]
        + force[35] * y1_[1] * y2_[2]
        + force[36] * y1_[3] * y3_[0]
        + force[36] * y2_[3] * y3_[0]
        + force[37] * y1_[3] * y2_[0]
        + force[37] * y1_[0] * y2_[3]
        + force[38] * y1_[4]
        + force[38] * y2_[4]
    )

    v6 = (
        force[39] * y3_[5]
        + force[40] * y1_[0] * y3_[4]
        + force[40] * y2_[0] * y3_[4]
        + force[41] * y1_[0] * y2_[0] * y3_[3]
        + force[42] * y1_[1] * y3_[3]
        + force[42] * y2_[1] * y3_[3]
        + force[43] * y1_[1] * y2_[0] * y3_[2]
        + force[43] * y1_[0] * y2_[1] * y3_[2]
        + force[44] * y1_[1] * y2_[1] * y3_[1]
        + force[45] * y1_[2] * y3_[2]
        + force[45] * y2_[2] * y3_[2]
        + force[46] * y1_[2] * y2_[0] * y3_[1]
        + force[46] * y1_[0] * y2_[2] * y3_[1]
        + force[47] * y1_[2] * y2_[1] * y3_[0]
        + force[47] * y1_[1] * y2_[2] * y3_[0]
        + force[48] * y1_[2] * y2_[2]
        + force[49] * y1_[3] * y3_[1]
        + force[49] * y2_[3] * y3_[1]
        + force[50] * y1_[3] * y2_[0] * y3_[0]
        + force[50] * y1_[0] * y2_[3] * y3_[0]
        + force[51] * y1_[3] * y2_[1]
        + force[51] * y1_[1] * y2_[3]
        + force[52] * y1_[4] * y3_[0]
        + force[52] * y2_[4] * y3_[0]
        + force[53] * y1_[4] * y2_[0]
        + force[53] * y1_[0] * y2_[4]
        + force[54] * y1_[5]
        + force[54] * y2_[5]
    )

    v7 = (
        force[55] * y3_[6]
        + force[56] * y1_[0] * y3_[5]
        + force[56] * y2_[0] * y3_[5]
        + force[57] * y1_[0] * y2_[0] * y3_[4]
        + force[58] * y1_[1] * y3_[4]
        + force[58] * y2_[1] * y3_[4]
        + force[59] * y1_[1] * y2_[0] * y3_[3]
        + force[59] * y1_[0] * y2_[1] * y3_[3]
        + force[60] * y1_[1] * y2_[1] * y3_[2]
        + force[61] * y1_[2] * y3_[3]
        + force[61] * y2_[2] * y3_[3]
        + force[62] * y1_[2] * y2_[0] * y3_[2]
        + force[62] * y1_[0] * y2_[2] * y3_[2]
        + force[63] * y1_[2] * y2_[1] * y3_[1]
        + force[63] * y1_[1] * y2_[2] * y3_[1]
        + force[64] * y1_[2] * y2_[2] * y3_[0]
        + force[65] * y1_[3] * y3_[2]
        + force[65] * y2_[3] * y3_[2]
        + force[66] * y1_[3] * y2_[0] * y3_[1]
        + force[66] * y1_[0] * y2_[3] * y3_[1]
        + force[67] * y1_[3] * y2_[1] * y3_[0]
        + force[67] * y1_[1] * y2_[3] * y3_[0]
        + force[68] * y1_[3] * y2_[2]
        + force[68] * y1_[2] * y2_[3]
        + force[69] * y1_[4] * y3_[1]
        + force[69] * y2_[4] * y3_[1]
        + force[70] * y1_[4] * y2_[0] * y3_[0]
        + force[70] * y1_[0] * y2_[4] * y3_[0]
        + force[71] * y1_[4] * y2_[1]
        + force[71] * y1_[1] * y2_[4]
        + force[72] * y1_[5] * y3_[0]
        + force[72] * y2_[5] * y3_[0]
        + force[73] * y1_[5] * y2_[0]
        + force[73] * y1_[0] * y2_[5]
        + force[74] * y1_[6]
        + force[74] * y2_[6]
    )

    v8 = (
        force[75] * y3_[7]
        + force[76] * y1_[0] * y3_[6]
        + force[76] * y2_[0] * y3_[6]
        + force[77] * y1_[0] * y2_[0] * y3_[5]
        + force[78] * y1_[1] * y3_[5]
        + force[78] * y2_[1] * y3_[5]
        + force[79] * y1_[1] * y2_[0] * y3_[4]
        + force[79] * y1_[0] * y2_[1] * y3_[4]
        + force[80] * y1_[1] * y2_[1] * y3_[3]
        + force[81] * y1_[2] * y3_[4]
        + force[81] * y2_[2] * y3_[4]
        + force[82] * y1_[2] * y2_[0] * y3_[3]
        + force[82] * y1_[0] * y2_[2] * y3_[3]
        + force[83] * y1_[2] * y2_[1] * y3_[2]
        + force[83] * y1_[1] * y2_[2] * y3_[2]
        + force[84] * y1_[2] * y2_[2] * y3_[1]
        + force[85] * y1_[3] * y3_[3]
        + force[85] * y2_[3] * y3_[3]
        + force[86] * y1_[3] * y2_[0] * y3_[2]
        + force[86] * y1_[0] * y2_[3] * y3_[2]
        + force[87] * y1_[3] * y2_[1] * y3_[1]
        + force[87] * y1_[1] * y2_[3] * y3_[1]
        + force[88] * y1_[3] * y2_[2] * y3_[0]
        + force[88] * y1_[2] * y2_[3] * y3_[0]
        + force[89] * y1_[3] * y2_[3]
        + force[90] * y1_[4] * y3_[2]
        + force[90] * y2_[4] * y3_[2]
        + force[91] * y1_[4] * y2_[0] * y3_[1]
        + force[91] * y1_[0] * y2_[4] * y3_[1]
        + force[92] * y1_[4] * y2_[1] * y3_[0]
        + force[92] * y1_[1] * y2_[4] * y3_[0]
        + force[93] * y1_[4] * y2_[2]
        + force[93] * y1_[2] * y2_[4]
        + force[94] * y1_[5] * y3_[1]
        + force[94] * y2_[5] * y3_[1]
        + force[95] * y1_[5] * y2_[0] * y3_[0]
        + force[95] * y1_[0] * y2_[5] * y3_[0]
        + force[96] * y1_[5] * y2_[1]
        + force[96] * y1_[1] * y2_[5]
        + force[97] * y1_[6] * y3_[0]
        + force[97] * y2_[6] * y3_[0]
        + force[98] * y1_[6] * y2_[0]
        + force[98] * y1_[0] * y2_[6]
        + force[99] * y1_[7]
        + force[99] * y2_[7]
    )

    return v0 + v1 + v2 + v3 + v4 + v5 + v6 + v7 + v8 + vhh
