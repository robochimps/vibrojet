"""
Potential energy surface of ammonia NH₃.

This module provides a Python implementation of the potential energy surface
originally defined in the TROVE function `MLpoten_xy3_morbid_Roman_10`,
https://github.com/Trovemaster/TROVE/blob/bdfbb1c066943f1e44fd88abbe35858ce46ea7d2/pot_NH3_Roman.f90#L94C12-L94C39

The parameters of the function are included in the supplementary material
of the manuscript:

O. L. Polyansky, R. I. Ovsyannikov, A. A. Kyuberis, L. Lodi, J. Tennyson,
A. Yachmenev, S. N. Yurchenko, N. F. Zobov,
"Calculation of rotation-vibration energy levels of the ammonia molecule
based on an ab initio potential energy surface",
J. Mol. Spectrosc. 327, 21-30 (2016).
https://doi.org/10.1016/j.jms.2016.08.003

**Units:**
- Distances must be provided in Ångströms.
- Angles must be provided in radians.
- The output energy is given in inverse centimeters (cm⁻¹)

**Example energy levels (in cm⁻¹):**
...
"""

from io import StringIO

import jax
import numpy as np
from jax import config
from jax import numpy as jnp

config.update("jax_enable_x64", True)

_params = """
re           0            1.0116
alphae       0          106.719
amorse       0            2.15000
ve           9            0.00000000
fa1          0            0.00000000
fa2          9       325716.01620952
fa3          8      -407584.03662550
fa4          7      1014034.78769005
fa5          6     -1680432.98596561
fa6          5      2653016.86747553
fa7          0            0.00000000
fa8          0            0.00000000
f1a1         9       -33847.45030612
f2a1         9        41948.95243411
f3a1         8      -335300.46545705
f4a1         7      1180588.29235993
f5a1         2     -2467933.02306495
f6a1         0            0.00000000
f11          9        38673.15768901
f1a11        8       -17258.93955723
f2a11        7        48181.53737878
f3a11        6      -440317.81040339
f4a11        5      1006257.88646847
f0a12        9         -399.75472893
f1a12        8         5064.71956757
f2a12        7        43265.54969011
f3a12        6      -230499.41244708
f4a12        5       747144.62550837
f0a14        9        -3665.00101387
f1a14        8       -17152.16618535
f2a14        7       -48191.67633686
f3a14        6       182490.16960839
f4a14        5      -455703.88828046
f0a44        9        16836.26967329
f1a44        8        67410.13104391
f2a44        7      -110855.42203699
f3a44        6       292024.69853247
f4a44        5      -463478.17915716
f0a111       7          252.15277304
f1a111       6        -9129.14167136
f2a111       5        58443.79069821
f3a111       4      -272130.21548714
f0a112       7         -193.44330596
f1a112       6          993.34082987
f2a112       5        24203.47725401
f3a112       4       -89053.23498056
f0a114       7        -2080.85739431
f1a114       6        -6144.58328076
f2a114       5       -71711.99913172
f3a114       4       191776.71636360
f0a123       7         -354.67270273
f1a123       6         5553.25042008
f2a123       5        11746.93901892
f3a123       4       -99650.71751511
f0a124       7         1958.17841640
f1a124       6         6042.23661704
f2a124       5        -4987.22255119
f3a124       0            0.00000000
f0a144       7        -1504.87608047
f1a144       6        -6778.20174955
f2a144       5       -23325.39037316
f3a144       4       102811.78804491
f0a155       7        -3060.00110539
f1a155       6        -9086.29961334
f2a155       5        -2050.17915889
f3a155       4      -180133.35562909
f0a455       7         1751.53997262
f1a455       6       -57822.02937610
f2a455       5        -3330.23525544
f3a455       4       476248.89710336
f0a1111      5         3188.09507730
f1a1111      4        -7030.54469512
f2a1111      3        48730.33047541
f0a1112      5         -469.26948366
f1a1112      4         -851.20253936
f2a1112      3         5880.55673854
f0a1114      5         -539.86634451
f1a1114      4        -5231.66476955
f2a1114      3       -26529.30140552
f1122        5         -178.31552262
f1a1122      4          653.23244274
f2a1122      3        28320.31700448
f0a1123      5         -120.67354833
f1a1123      4         2874.18913319
f2a1123      3       -13635.49088938
f0a1124      5          764.77540472
f1a1124      4         1819.96723987
f2a1124      3          224.22445177
f0a1125      5         1406.20699602
f1a1125      4         5183.96179903
f2a1125      3         1043.62814536
f0a1144      5        -1378.65195059
f1a1144      4        -6134.53433367
f2a1144      3        21292.41744159
f0a1155      5        -2601.69106804
f1a1155      4       -13348.02867757
f2a1155      3        29334.10650864
f0a1244      5          538.56485959
f1a1244      4        -2614.63638781
f2a1244      3       -33047.29904350
f0a1255      5         1382.88710616
f1a1255      4         -487.52311828
f2a1255      3        -8243.93545709
f0a1444      5         -620.16323142
f1a1444      4        -3667.15979207
f2a1444      3        -9209.48373012
f0a1455      5        -1819.70801539
f1a1455      4        -6395.76333555
f2a1455      3       -84881.66744031
f0a4444      5          426.88966992
f1a4444      4         9484.15054744
f2a4444      3        20178.98063760
f0a44444     4          -28.60638496
f1a44444     3         2325.42507496
f2a44444     2          363.19971764
f0a33455     4        -1205.21968684
f1a33455     3        -2081.87577455
f2a33455     2       -13455.67347374
f0a33445     4          861.67023978
f1a33445     3         3651.69054892
f2a33445     2         3168.86106930
f0a33345     4         1342.84711417
f1a33345     3         7248.66481993
f2a33345     2       -71843.35550719
f0a33344     4        -2304.96074110
f1a33344     3       -13064.92587616
f2a33344     2       132813.73687691
f0a33334     4         -220.32144297
f1a33334     3         2338.25588237
f2a33334     2         2444.07673858
f0a33333     4         1838.71718401
f1a33333     3         1228.67769932
f2a33333     2        -9203.50369834
f0a25555     4          -72.61344699
f1a25555     3        -2010.89348137
f2a25555     2       -36101.05321086
f0a24455     4          651.10471974
f1a24455     3          713.21904158
f2a24455     2       -75851.09626298
f0a24445     4         1265.64336598
f1a24445     3         7387.49575662
f2a24445     2       -30807.03785277
f0a23333     4         -543.30934523
f1a23333     3         3957.36507511
f2a23333     2       -12489.42081079
f0a13455     4         1115.09792451
f1a13455     3         6279.60902928
f2a13455     2         7931.12088763
f0a13445     4         -413.11293396
f1a13445     3        -1064.80580848
f2a13445     2        21688.64197463
f0a13345     4         -782.61631703
f1a13345     3         -107.90395931
f2a13345     2       -17552.46651165
f0a12355     4          547.03268025
f1a12355     3         2357.77820050
f2a12355     2         7817.66034913
f0a11334     4          800.06925086
f1a11334     3        -2977.57627915
f2a11334     2         8011.33617867
f0a11333     4         -198.54775243
f1a11333     3         1502.44958123
f2a11333     2        -3080.61606902
f0a11255     4          462.71236662
f1a11255     3          142.11407361
f2a11255     2        11222.24465189
f0a11245     4          616.24632207
f1a11245     3        -1753.79820274
f2a11245     2        16381.39787382
f0a11234     4           83.75138515
f1a11234     3         1255.77982407
f2a11234     2       -11744.10252583
f0a11233     4         -300.73267666
f1a11233     3         5924.22538647
f2a11233     2       -11899.54686114
f0a11135     4          -26.80584922
f1a11135     3        -4483.78711529
f2a11135     2         3280.21077816
f0a11134     4          200.23322027
f1a11134     3         1079.34785858
f2a11134     2        -3264.05719147
f0a11123     4         -140.88990597
f1a11123     3        -2665.17177672
f2a11123     2        31845.86741569
f0a555555    3          -32.36833953
f1a555555    2         1414.69478188
f2a555555    1        17966.45696330
f0a444444    3           99.00260023
f1a444444    2         3693.86676349
f2a444444    1        33257.84307644
f0a335555    3          169.95689004
f1a335555    2         1933.41274832
f2a335555    1        -5814.14629737
f0a334455    3          853.52196388
f1a334455    2         7779.03389984
f2a334455    1        -9639.09736622
f0a334445    3         -702.97213380
f1a334445    2        -6963.52923108
f2a334445    1        13384.46040176
f0a333555    3          679.74816770
f1a333555    2       -10384.59866879
f2a333555    1        -7492.46301350
f0a333333    3         1316.65549175
f1a333333    2         7091.71989127
f2a333333    1       -30903.10095551
f0a244555    3         -888.54503946
f1a244555    2       -21544.87804230
f2a244555    1       -12569.49567596
f0a244455    3         -303.18870584
f1a244455    2        -9714.02000006
f2a244455    1        25817.45043529
f0a233445    3          647.06680537
f1a233445    2         -532.84597845
f2a233445    1        64456.63967531
f0a233444    3         -789.21736750
f1a233444    2        -4060.27026694
f2a233444    1        36773.52160623
f0a233345    3         -501.12603234
f1a233345    2        -1181.27071875
f2a233345    1       -60947.30127871
f0a233344    3         -134.15458980
f1a233344    2          362.80340580
f2a233344    1        36589.43018700
f0a233335    3         -285.11422870
f1a233335    2         5657.33832349
f2a233335    1       -37508.83677115
f0a223355    3          298.41978602
f1a223355    2        13497.28389863
f2a223355    1      -130581.58272120
f0a222335    3           34.33604649
f1a222335    2       -13456.35462792
f2a222335    1        95037.82662869
f0a222334    3         -118.55281453
f1a222334    2       -20971.56363359
f2a222334    1        53772.32818868
f0a222333    3          968.98568284
f1a222333    2        -5130.94399516
f2a222333    1         2987.00542126
f0a222255    3        -1347.75135730
f1a222255    2        -4309.11943158
f2a222255    1       -87383.84205555
f0a222245    3        -2403.39106197
f1a222245    2       -13184.42654906
f2a222245    1         6767.91147272
f0a222233    3         -324.53226778
f1a222233    2         2453.93446714
f2a222233    1       -23420.23407669
f0a222224    3         -325.14869145
f1a222224    2        -1949.48155107
f2a222224    1        37284.84940845
f0a145555    3        -1483.57552588
f1a145555    2       -31110.79975732
f2a145555    1        48571.52950016
f0a134444    3         -416.65892977
f1a134444    2        -2311.17088761
f2a134444    1         8208.53950925
f0a133444    3          348.15815946
f1a133444    2        -1693.44030453
f2a133444    1        57622.89249343
f0a133345    3           87.55692536
f1a133345    2         6115.03490154
f2a133345    1        -9332.32706069
f0a133334    3         -150.34584451
f1a133334    2         -406.93457383
f2a133334    1        -1853.76517929
f0a133333    3         -717.21002120
f1a133333    2         8839.31234783
f2a133333    1       -47352.74030676
f0a124555    3         1273.40849330
f1a124555    2        12643.64942667
f2a124555    1       -19713.23934397
f0a124455    3          412.59023065
f1a124455    2         8412.13458899
f2a124455    1        11829.73312840
f0a123455    3         -780.66787760
f1a123455    2         1298.18955331
f2a123455    1       118650.99738297
f0a123345    3         -104.47974179
f1a123345    2        -8974.97212459
f2a123345    1        55132.64100449
f0a113555    3         -776.45809819
f1a113555    2        -1436.75662891
f2a113555    1       -21829.18601199
f0a113345    3         -544.27308400
f1a113345    0            0.00000000
f2a113345    1        13127.93316546
f0a112355    3         -391.78207633
f1a112355    2         3616.80559954
f2a112355    1        10615.88100752
f0a112335    3        -1126.05319860
f1a112335    2        17208.25229045
f2a112335    1       -71582.17953913
f0a112233    3          436.49059976
f1a112233    2        -9456.87252504
f2a112233    1        35059.02484299
f0a111444    3         -592.26160094
f1a111444    2         5354.93739874
f2a111444    1         5824.09141375
f0a111234    3          566.39864077
f1a111234    2       -12396.84213888
f2a111234    1        30426.94208954
f0a111233    3         -626.84279115
f1a111233    2         4921.04842876
f2a111233    1        -6131.13737817
f0a111123    3          -52.82349407
f1a111123    2        -2216.11513467
f2a111123    1         2327.73215452
"""

PARAMS = np.genfromtxt(StringIO(_params), usecols=2, dtype=float)


def poten(q):
    r1, r2, r3, alpha1, alpha2, alpha3 = q

    r_eq = PARAMS[0]
    alpha_eq = PARAMS[1] * np.pi / 180
    rhoe = np.pi - np.arcsin(2 * np.sin(alpha_eq / 2) / np.sqrt(3))
    aa1 = PARAMS[2]

    alpha = (alpha1 + alpha2 + alpha3) / 3
    sinrho = 2 * jnp.sin(alpha / 2) / jnp.sqrt(3)
    s4 = (2 * alpha1 - alpha2 - alpha3) / jnp.sqrt(6)
    s5 = (alpha2 - alpha3) / jnp.sqrt(2)

    y1 = 1 - jnp.exp(-aa1 * (r1 - r_eq))
    y2 = 1 - jnp.exp(-aa1 * (r2 - r_eq))
    y3 = 1 - jnp.exp(-aa1 * (r3 - r_eq))
    y4 = s4
    y5 = s5
    cosrho = jnp.sin(rhoe) - sinrho

    force = PARAMS[3:]
    v = pot_v2(cosrho, y1, y2, y3, y4, y5, force[:35])
    if len(force) > 35:
        v += pot_v3(cosrho, y1, y2, y3, y4, y5, force[35:67])
    if len(force) > 67:
        v += pot_v4(cosrho, y1, y2, y3, y4, y5, force[67:109])
    if len(force) > 109:
        v += pot_v5(cosrho, y1, y2, y3, y4, y5, force[109:181])
    if len(force) > 181:
        v += pot_v6(cosrho, y1, y2, y3, y4, y5, force[181:])

    # check_rho = jnp.abs(sinrho) - 1 <= 10 * jnp.finfo(float).eps
    # def raise_err(_):
    #     # jax.debug.print(f"|sin(rho)| > 1.0: {jnp.abs(sinrho)}")
    #     return -1e10
    # jax.experimental.jet is not yet implemented for `cond`
    # return jax.lax.cond(check_rho, lambda _: v, raise_err, operand=None)

    return v


def pot_v2(coro, y1, y2, y3, y4, y5, force):
    sqrt3 = jnp.sqrt(3)
    coro2, coro3, coro4, coro5, coro6, coro7 = [coro**i for i in (2, 3, 4, 5, 6, 7)]
    y1_2 = y1**2
    y2_2 = y2**2
    y3_2 = y3**2
    y4_2 = y4**2
    y5_2 = y5**2
    (
        ve,
        f1a,
        f2a,
        f3a,
        f4a,
        f5a,
        f6a,
        f7a,
        f0a1,
        f1a1,
        f2a1,
        f3a1,
        f4a1,
        f5a1,
        f6a1,
        f0a11,
        f1a11,
        f2a11,
        f3a11,
        f4a11,
        f0a12,
        f1a12,
        f2a12,
        f3a12,
        f4a12,
        f0a14,
        f1a14,
        f2a14,
        f3a14,
        f4a14,
        f0a44,
        f1a44,
        f2a44,
        f3a44,
        f4a44,
    ) = force

    v0 = (
        ve
        + f1a * coro
        + f2a * coro2
        + f3a * coro3
        + f4a * coro4
        + f5a * coro5
        + f6a * coro6
        + f7a * coro7
    )  #  +f8a*coro8

    fea1 = (
        f0a1
        + f1a1 * coro
        + f2a1 * coro2
        + f3a1 * coro3
        + f4a1 * coro4
        + f5a1 * coro5
        + f6a1 * coro6
    )
    fea11 = f0a11 + f1a11 * coro + f2a11 * coro2 + f3a11 * coro3 + f4a11 * coro4
    fea12 = f0a12 + f1a12 * coro + f2a12 * coro2 + f3a12 * coro3 + f4a12 * coro4
    fea14 = f0a14 + f1a14 * coro + f2a14 * coro2 + f3a14 * coro3 + f4a14 * coro4
    fea44 = f0a44 + f1a44 * coro + f2a44 * coro2 + f3a44 * coro3 + f4a44 * coro4
    v1 = (y3 + y2 + y1) * fea1
    v2 = (
        (y2 * y3 + y1 * y3 + y1 * y2) * fea12
        + (y2_2 + y3_2 + y1_2) * fea11
        + (
            -sqrt3 * y3 * y5 / 2.0
            - y3 * y4 / 2.0
            + y1 * y4
            + sqrt3 * y2 * y5 / 2.0
            - y2 * y4 / 2.0
        )
        * fea14
        + (y5_2 + y4_2) * fea44
    )
    return v0 + v1 + v2


def pot_v3(coro, y1, y2, y3, y4, y5, force):
    sqrt3 = jnp.sqrt(3)
    coro2, coro3 = [coro**i for i in (2, 3)]
    y1_2, y1_3 = [y1**i for i in (2, 3)]
    y2_2, y2_3 = [y2**i for i in (2, 3)]
    y3_2, y3_3 = [y3**i for i in (2, 3)]
    y4_2, y4_3 = [y4**i for i in (2, 3)]
    y5_2 = y5**2
    (
        f0a111,
        f1a111,
        f2a111,
        f3a111,
        f0a112,
        f1a112,
        f2a112,
        f3a112,
        f0a114,
        f1a114,
        f2a114,
        f3a114,
        f0a123,
        f1a123,
        f2a123,
        f3a123,
        f0a124,
        f1a124,
        f2a124,
        f3a124,
        f0a144,
        f1a144,
        f2a144,
        f3a144,
        f0a155,
        f1a155,
        f2a155,
        f3a155,
        f0a455,
        f1a455,
        f2a455,
        f3a455,
    ) = force

    fea111 = f0a111 + f1a111 * coro + f2a111 * coro2 + f3a111 * coro3
    fea112 = f0a112 + f1a112 * coro + f2a112 * coro2 + f3a112 * coro3
    fea114 = f0a114 + f1a114 * coro + f2a114 * coro2 + f3a114 * coro3
    fea123 = f0a123 + f1a123 * coro + f2a123 * coro2 + f3a123 * coro3
    fea124 = f0a124 + f1a124 * coro + f2a124 * coro2 + f3a124 * coro3
    fea144 = f0a144 + f1a144 * coro + f2a144 * coro2 + f3a144 * coro3
    fea155 = f0a155 + f1a155 * coro + f2a155 * coro2 + f3a155 * coro3
    fea455 = f0a455 + f1a455 * coro + f2a455 * coro2 + f3a455 * coro3

    v3 = (
        (
            y1 * y3 * y4
            + y1 * y2 * y4
            - 2.0 * y2 * y3 * y4
            + sqrt3 * y1 * y2 * y5
            - sqrt3 * y1 * y3 * y5
        )
        * fea124
        + (
            3.0 / 4.0 * y3 * y4_2
            - sqrt3 * y3 * y4 * y5 / 2.0
            + y1 * y5_2
            + y2 * y5_2 / 4.0
            + 3.0 / 4.0 * y2 * y4_2
            + sqrt3 * y2 * y4 * y5 / 2.0
            + y3 * y5_2 / 4.0
        )
        * fea155
        + (y2 * y3_2 + y1 * y3_2 + y1_2 * y3 + y1 * y2_2 + y2_2 * y3 + y1_2 * y2)
        * fea112
        + (-(y4_3) / 3.0 + y4 * y5_2) * fea455
        + fea123 * y1 * y2 * y3
        + (
            y1 * y4_2
            + 3.0 / 4.0 * y3 * y5_2
            + 3.0 / 4.0 * y2 * y5_2
            + y2 * y4_2 / 4.0
            - sqrt3 * y2 * y4 * y5 / 2.0
            + sqrt3 * y3 * y4 * y5 / 2.0
            + y3 * y4_2 / 4.0
        )
        * fea144
        + (y3_3 + y2_3 + y1_3) * fea111
        + (
            -(y2_2) * y4 / 2.0
            - y3_2 * y4 / 2.0
            + sqrt3 * y2_2 * y5 / 2.0
            + y1_2 * y4
            - sqrt3 * y3_2 * y5 / 2.0
        )
        * fea114
    )
    return v3


def pot_v4(coro, y1, y2, y3, y4, y5, force):
    sqrt3 = jnp.sqrt(3)
    coro2 = coro**2
    y1_2, y1_3, y1_4 = [y1**i for i in (2, 3, 4)]
    y2_2, y2_3, y2_4 = [y2**i for i in (2, 3, 4)]
    y3_2, y3_3, y3_4 = [y3**i for i in (2, 3, 4)]
    y4_2, y4_3, y4_4 = [y4**i for i in (2, 3, 4)]
    y5_2, y5_3, y5_4 = [y5**i for i in (2, 3, 4)]
    (
        f0a1111,
        f1a1111,
        f2a1111,
        f0a1112,
        f1a1112,
        f2a1112,
        f0a1114,
        f1a1114,
        f2a1114,
        f0a1122,
        f1a1122,
        f2a1122,
        f0a1123,
        f1a1123,
        f2a1123,
        f0a1124,
        f1a1124,
        f2a1124,
        f0a1125,
        f1a1125,
        f2a1125,
        f0a1144,
        f1a1144,
        f2a1144,
        f0a1155,
        f1a1155,
        f2a1155,
        f0a1244,
        f1a1244,
        f2a1244,
        f0a1255,
        f1a1255,
        f2a1255,
        f0a1444,
        f1a1444,
        f2a1444,
        f0a1455,
        f1a1455,
        f2a1455,
        f0a4444,
        f1a4444,
        f2a4444,
    ) = force

    fea1111 = f0a1111 + f1a1111 * coro + f2a1111 * coro2
    fea1112 = f0a1112 + f1a1112 * coro + f2a1112 * coro2
    fea1114 = f0a1114 + f1a1114 * coro + f2a1114 * coro2
    fea1122 = f0a1122 + f1a1122 * coro + f2a1122 * coro2
    fea1123 = f0a1123 + f1a1123 * coro + f2a1123 * coro2
    fea1124 = f0a1124 + f1a1124 * coro + f2a1124 * coro2
    fea1125 = f0a1125 + f1a1125 * coro + f2a1125 * coro2
    fea1144 = f0a1144 + f1a1144 * coro + f2a1144 * coro2
    fea1155 = f0a1155 + f1a1155 * coro + f2a1155 * coro2
    fea1244 = f0a1244 + f1a1244 * coro + f2a1244 * coro2
    fea1255 = f0a1255 + f1a1255 * coro + f2a1255 * coro2
    fea1444 = f0a1444 + f1a1444 * coro + f2a1444 * coro2
    fea1455 = f0a1455 + f1a1455 * coro + f2a1455 * coro2
    fea4444 = f0a4444 + f1a4444 * coro + f2a4444 * coro2

    s2 = (
        (y4_4 + y5_4 + 2.0 * y4_2 * y5_2) * fea4444
        + (
            3.0 / 8.0 * sqrt3 * y2 * y5_3
            - 3.0 / 8.0 * sqrt3 * y3 * y4_2 * y5
            - 3.0 / 8.0 * sqrt3 * y3 * y5_3
            - 9.0 / 8.0 * y2 * y4 * y5_2
            - y3 * y4_3 / 8.0
            - y2 * y4_3 / 8.0
            - 9.0 / 8.0 * y3 * y4 * y5_2
            + y1 * y4_3
            + 3.0 / 8.0 * sqrt3 * y2 * y4_2 * y5
        )
        * fea1444
        + (
            3.0 / 4.0 * y2_2 * y4_2
            + 3.0 / 4.0 * y3_2 * y4_2
            + y1_2 * y5_2
            + y3_2 * y5_2 / 4.0
            - sqrt3 * y3_2 * y4 * y5 / 2.0
            + sqrt3 * y2_2 * y4 * y5 / 2.0
            + y2_2 * y5_2 / 4.0
        )
        * fea1155
    )

    s1 = (
        s2
        + (
            y3_2 * y4_2 / 4.0
            + 3.0 / 4.0 * y3_2 * y5_2
            + y1_2 * y4_2
            + y2_2 * y4_2 / 4.0
            + sqrt3 * y3_2 * y4 * y5 / 2.0
            - sqrt3 * y2_2 * y4 * y5 / 2.0
            + 3.0 / 4.0 * y2_2 * y5_2
        )
        * fea1144
        + (
            y1_3 * y4
            + sqrt3 * y2_3 * y5 / 2.0
            - sqrt3 * y3_3 * y5 / 2.0
            - y2_3 * y4 / 2.0
            - y3_3 * y4 / 2.0
        )
        * fea1114
        + (y2_4 + y1_4 + y3_4) * fea1111
        + (
            sqrt3 * y1 * y3 * y4 * y5
            + 3.0 / 2.0 * y2 * y3 * y5_2
            - y2 * y3 * y4_2 / 2.0
            + y1 * y2 * y4_2
            - sqrt3 * y1 * y2 * y4 * y5
            + y1 * y3 * y4_2
        )
        * fea1244
    )

    s2 = (
        s1
        + (
            y1 * y3 * y5_2
            + y1 * y2 * y5_2
            - sqrt3 * y1 * y3 * y4 * y5
            - y2 * y3 * y5_2 / 2.0
            + 3.0 / 2.0 * y2 * y3 * y4_2
            + sqrt3 * y1 * y2 * y4 * y5
        )
        * fea1255
        + (
            -y1 * y3_2 * y4 / 2.0
            + y1_2 * y3 * y4
            - sqrt3 * y1 * y3_2 * y5 / 2.0
            - sqrt3 * y2 * y3_2 * y5 / 2.0
            + y1_2 * y2 * y4
            + sqrt3 * y2_2 * y3 * y5 / 2.0
            - y2_2 * y3 * y4 / 2.0
            + sqrt3 * y1 * y2_2 * y5 / 2.0
            - y2 * y3_2 * y4 / 2.0
            - y1 * y2_2 * y4 / 2.0
        )
        * fea1124
        + (
            y1_2 * y2 * y5
            + sqrt3 * y1 * y3_2 * y4 / 2.0
            + sqrt3 * y1 * y2_2 * y4 / 2.0
            - sqrt3 * y2 * y3_2 * y4 / 2.0
            - sqrt3 * y2_2 * y3 * y4 / 2.0
            - y2_2 * y3 * y5 / 2.0
            + y2 * y3_2 * y5 / 2.0
            - y1 * y3_2 * y5 / 2.0
            + y1 * y2_2 * y5 / 2.0
            - y1_2 * y3 * y5
        )
        * fea1125
    )

    v4 = (
        s2
        + (y2 * y3_3 + y1_3 * y3 + y1_3 * y2 + y1 * y2_3 + y1 * y3_3 + y2_3 * y3)
        * fea1112
        + (y2_2 * y3_2 + y1_2 * y3_2 + y1_2 * y2_2) * fea1122
        + (y1 * y2_2 * y3 + y1_2 * y2 * y3 + y1 * y2 * y3_2) * fea1123
        + (
            5.0 / 8.0 * y2 * y4 * y5_2
            + sqrt3 * y2 * y5_3 / 8.0
            - sqrt3 * y3 * y4_2 * y5 / 8.0
            + sqrt3 * y2 * y4_2 * y5 / 8.0
            - 3.0 / 8.0 * y2 * y4_3
            + y1 * y4 * y5_2
            - sqrt3 * y3 * y5_3 / 8.0
            + 5.0 / 8.0 * y3 * y4 * y5_2
            - 3.0 / 8.0 * y3 * y4_3
        )
        * fea1455
    )
    return v4


def pot_v5(coro, y1, y2, y3, y4, y5, force):
    sqrt3 = jnp.sqrt(3)
    coro2 = coro**2
    y1_2, y1_3, y1_4, y1_5 = [y1**i for i in (2, 3, 4, 5)]
    y2_2, y2_3, y2_4, y2_5 = [y2**i for i in (2, 3, 4, 5)]
    y3_2, y3_3, y3_4, y3_5 = [y3**i for i in (2, 3, 4, 5)]
    y4_2, y4_3, y4_4, y4_5 = [y4**i for i in (2, 3, 4, 5)]
    y5_2, y5_3, y5_4 = [y5**i for i in (2, 3, 4)]
    (
        f0a44444,
        f1a44444,
        f2a44444,
        f0a33455,
        f1a33455,
        f2a33455,
        f0a33445,
        f1a33445,
        f2a33445,
        f0a33345,
        f1a33345,
        f2a33345,
        f0a33344,
        f1a33344,
        f2a33344,
        f0a33334,
        f1a33334,
        f2a33334,
        f0a33333,
        f1a33333,
        f2a33333,
        f0a25555,
        f1a25555,
        f2a25555,
        f0a24455,
        f1a24455,
        f2a24455,
        f0a24445,
        f1a24445,
        f2a24445,
        f0a23333,
        f1a23333,
        f2a23333,
        f0a13455,
        f1a13455,
        f2a13455,
        f0a13445,
        f1a13445,
        f2a13445,
        f0a13345,
        f1a13345,
        f2a13345,
        f0a12355,
        f1a12355,
        f2a12355,
        f0a11334,
        f1a11334,
        f2a11334,
        f0a11333,
        f1a11333,
        f2a11333,
        f0a11255,
        f1a11255,
        f2a11255,
        f0a11245,
        f1a11245,
        f2a11245,
        f0a11234,
        f1a11234,
        f2a11234,
        f0a11233,
        f1a11233,
        f2a11233,
        f0a11135,
        f1a11135,
        f2a11135,
        f0a11134,
        f1a11134,
        f2a11134,
        f0a11123,
        f1a11123,
        f2a11123,
    ) = force

    fea44444 = f0a44444 + f1a44444 * coro + f2a44444 * coro2
    fea33455 = f0a33455 + f1a33455 * coro + f2a33455 * coro2
    fea33445 = f0a33445 + f1a33445 * coro + f2a33445 * coro2
    fea33345 = f0a33345 + f1a33345 * coro + f2a33345 * coro2
    fea33344 = f0a33344 + f1a33344 * coro + f2a33344 * coro2
    fea33334 = f0a33334 + f1a33334 * coro + f2a33334 * coro2
    fea33333 = f0a33333 + f1a33333 * coro + f2a33333 * coro2
    fea25555 = f0a25555 + f1a25555 * coro + f2a25555 * coro2
    fea24455 = f0a24455 + f1a24455 * coro + f2a24455 * coro2
    fea24445 = f0a24445 + f1a24445 * coro + f2a24445 * coro2
    fea23333 = f0a23333 + f1a23333 * coro + f2a23333 * coro2
    fea13455 = f0a13455 + f1a13455 * coro + f2a13455 * coro2
    fea13445 = f0a13445 + f1a13445 * coro + f2a13445 * coro2
    fea13345 = f0a13345 + f1a13345 * coro + f2a13345 * coro2
    fea12355 = f0a12355 + f1a12355 * coro + f2a12355 * coro2
    fea11334 = f0a11334 + f1a11334 * coro + f2a11334 * coro2
    fea11333 = f0a11333 + f1a11333 * coro + f2a11333 * coro2
    fea11255 = f0a11255 + f1a11255 * coro + f2a11255 * coro2
    fea11245 = f0a11245 + f1a11245 * coro + f2a11245 * coro2
    fea11234 = f0a11234 + f1a11234 * coro + f2a11234 * coro2
    fea11233 = f0a11233 + f1a11233 * coro + f2a11233 * coro2
    fea11135 = f0a11135 + f1a11135 * coro + f2a11135 * coro2
    fea11134 = f0a11134 + f1a11134 * coro + f2a11134 * coro2
    fea11123 = f0a11123 + f1a11123 * coro + f2a11123 * coro2

    s3 = (
        (y4_5 - 2.0 * y4_3 * y5_2 - 3.0 * y4 * y5_4) * fea44444
        + (
            -4.0 * y3 * y4 * y5_3 * sqrt3
            + 9.0 * y1 * y4_2 * y5_2
            - 3.0 / 2.0 * y1 * y4_4
            + 4.0 * y2 * y4 * y5_3 * sqrt3
            + 3.0 * y2 * y4_4
            + 5.0 / 2.0 * y1 * y5_4
            + 3.0 * y3 * y4_4
            + y2 * y5_4
            + y3 * y5_4
        )
        * fea25555
        + (
            -y2 * y4_4
            + y3 * y4_2 * y5_2
            - 2.0 * y2 * y4 * y5_3 * sqrt3
            - y3 * y4_4
            - 7.0 / 2.0 * y1 * y4_2 * y5_2
            - 3.0 / 4.0 * y1 * y5_4
            + 2.0 * y3 * y4 * y5_3 * sqrt3
            + y2 * y4_2 * y5_2
            + 5.0 / 4.0 * y1 * y4_4
        )
        * fea24455
    )

    s2 = (
        s3
        + (
            y2 * y4_3 * y5
            - 3.0 * y3 * y4 * y5_3
            + 2.0 / 3.0 * y3 * y4_4 * sqrt3
            + 3.0 / 4.0 * y1 * y5_4 * sqrt3
            + 3.0 * y2 * y4 * y5_3
            - 7.0 / 12.0 * y1 * y4_4 * sqrt3
            + 3.0 / 2.0 * y1 * y4_2 * y5_2 * sqrt3
            - y3 * y4_3 * y5
            + 2.0 / 3.0 * y2 * y4_4 * sqrt3
        )
        * fea24445
        + (
            -(y2_2) * y5_3
            + y3_2 * y4_2 * y5
            + y3_2 * y5_3
            + 4.0 / 9.0 * y2_2 * y4_3 * sqrt3
            - 5.0 / 9.0 * y1_2 * y4_3 * sqrt3
            + 4.0 / 9.0 * y3_2 * y4_3 * sqrt3
            - y2_2 * y4_2 * y5
            - y1_2 * y4 * y5_2 * sqrt3
        )
        * fea33445
        + (
            y3_2 * y4 * y5_2
            - y1_2 * y4_3 / 3.0
            - y3_2 * y4_3 / 3.0
            + y1_2 * y4 * y5_2
            + y2_2 * y4 * y5_2
            - y2_2 * y4_3 / 3.0
        )
        * fea33455
    )

    s1 = (
        s2
        + (
            -(y2_3) * y4 * y5
            + y3_3 * y4 * y5
            + y2_3 * y5_2 * sqrt3 / 3.0
            + y1_3 * y4_2 * sqrt3 / 2.0
            + y3_3 * y5_2 * sqrt3 / 3.0
            - y1_3 * y5_2 * sqrt3 / 6.0
        )
        * fea33345
        + (
            y3_3 * y4_2
            + y3_3 * y5_2
            + y2_3 * y4_2
            + y2_3 * y5_2
            + y1_3 * y5_2
            + y1_3 * y4_2
        )
        * fea33344
        + (
            y3_4 * y4
            + sqrt3 * y3_4 * y5
            + y2_4 * y4
            - 2.0 * y1_4 * y4
            - sqrt3 * y2_4 * y5
        )
        * fea33334
        + (y2_5 + y3_5 + y1_5) * fea33333
        + (
            -4.0 / 9.0 * y1 * y2 * y4_3 * sqrt3
            - y1 * y2 * y5_3
            + y1 * y3 * y4_2 * y5
            + y2 * y3 * y4 * y5_2 * sqrt3
            - y1 * y2 * y4_2 * y5
            + 5.0 / 9.0 * y2 * y3 * y4_3 * sqrt3
            - 4.0 / 9.0 * y1 * y3 * y4_3 * sqrt3
            + y1 * y3 * y5_3
        )
        * fea13445
        + (
            y2 * y3 * y4 * y5_2
            + y1 * y2 * y4 * y5_2
            - y2 * y3 * y4_3 / 3.0
            - y1 * y2 * y4_3 / 3.0
            - y1 * y3 * y4_3 / 3.0
            + y1 * y3 * y4 * y5_2
        )
        * fea13455
    )

    s3 = (
        s1
        + (
            y1_2 * y3 * y5_2
            + y2_2 * y3 * y4_2
            + y2_2 * y3 * y5_2
            + y1 * y2_2 * y5_2
            + y1_2 * y2 * y5_2
            + y1 * y2_2 * y4_2
            + y2 * y3_2 * y4_2
            + y1 * y3_2 * y4_2
            + y1_2 * y3 * y4_2
            + y1_2 * y2 * y4_2
            + y1 * y3_2 * y5_2
            + y2 * y3_2 * y5_2
        )
        * fea11255
        + (
            2.0 / 3.0 * y1_2 * y3 * y4_2 * sqrt3
            + y1 * y3_2 * y5_2 * sqrt3 / 2.0
            + y1 * y2_2 * y5_2 * sqrt3 / 2.0
            + y2_2 * y3 * y5_2 * sqrt3 / 2.0
            - y1 * y2_2 * y4 * y5
            + y2 * y3_2 * y4 * y5
            + y1 * y3_2 * y4 * y5
            - y2_2 * y3 * y4 * y5
            + y2 * y3_2 * y4_2 * sqrt3 / 6.0
            + y1 * y3_2 * y4_2 * sqrt3 / 6.0
            + y1 * y2_2 * y4_2 * sqrt3 / 6.0
            + 2.0 / 3.0 * y1_2 * y2 * y4_2 * sqrt3
            + y2 * y3_2 * y5_2 * sqrt3 / 2.0
            + y2_2 * y3 * y4_2 * sqrt3 / 6.0
        )
        * fea13345
    )
    s4 = (
        s3
        + (
            y1_2 * y2 * y4 * y5
            + y1_2 * y3 * y4_2 * sqrt3 / 3.0
            + y1_2 * y2 * y4_2 * sqrt3 / 3.0
            - y1 * y2_2 * y4_2 * sqrt3 / 6.0
            + y2 * y3_2 * y4 * y5
            - y2_2 * y3 * y4 * y5
            - y1_2 * y3 * y4 * y5
            + y2 * y3_2 * y4_2 * sqrt3 / 3.0
            + y1 * y2_2 * y5_2 * sqrt3 / 2.0
            - y1 * y3_2 * y4_2 * sqrt3 / 6.0
            + y2_2 * y3 * y4_2 * sqrt3 / 3.0
            + y1 * y3_2 * y5_2 * sqrt3 / 2.0
        )
        * fea11245
    )
    s2 = (
        s4
        + (
            -(y1_3) * y2 * y5
            + y1_3 * y3 * y5
            + y2_3 * y3 * y5 / 2.0
            - y1 * y2_3 * y4 * sqrt3 / 2.0
            - y1 * y2_3 * y5 / 2.0
            - y2 * y3_3 * y5 / 2.0
            + y1 * y3_3 * y5 / 2.0
            + y2_3 * y3 * y4 * sqrt3 / 2.0
            + y2 * y3_3 * y4 * sqrt3 / 2.0
            - y1 * y3_3 * y4 * sqrt3 / 2.0
        )
        * fea11135
        + (
            y1_3 * y3 * y4
            - y2_3 * y3 * y4 / 2.0
            + y1_3 * y2 * y4
            - y2 * y3_3 * y4 / 2.0
            - y1 * y3_3 * y4 / 2.0
            + y1 * y2_3 * y5 * sqrt3 / 2.0
            + y2_3 * y3 * y5 * sqrt3 / 2.0
            - y2 * y3_3 * y5 * sqrt3 / 2.0
            - y1 * y2_3 * y4 / 2.0
            - y1 * y3_3 * y5 * sqrt3 / 2.0
        )
        * fea11134
    )

    v5 = (
        s2
        + (y1 * y2_4 + y1_4 * y3 + y1_4 * y2 + y2_4 * y3 + y2 * y3_4 + y1 * y3_4)
        * fea23333
        + (
            -2.0 * y2_2 * y3_2 * y4
            + y1_2 * y2_2 * y4
            - sqrt3 * y1_2 * y3_2 * y5
            + sqrt3 * y1_2 * y2_2 * y5
            + y1_2 * y3_2 * y4
        )
        * fea11334
        + (
            y1_2 * y3_3
            + y1_3 * y3_2
            + y2_2 * y3_3
            + y1_2 * y2_3
            + y1_3 * y2_2
            + y2_3 * y3_2
        )
        * fea11333
        + (y1 * y2 * y3 * y4_2 + y1 * y2 * y3 * y5_2) * fea12355
        + (
            -y1 * y2 * y3_2 * y4 / 2.0
            - y1 * y2_2 * y3 * y4 / 2.0
            - sqrt3 * y1 * y2 * y3_2 * y5 / 2.0
            + y1_2 * y2 * y3 * y4
            + sqrt3 * y1 * y2_2 * y3 * y5 / 2.0
        )
        * fea11234
        + (y1 * y2_3 * y3 + y1 * y2 * y3_3 + y1_3 * y2 * y3) * fea11123
        + (y1_2 * y2_2 * y3 + y1 * y2_2 * y3_2 + y1_2 * y2 * y3_2) * fea11233
    )
    return v5


def pot_v6(coro, y1, y2, y3, y4, y5, force):
    sqrt3 = jnp.sqrt(3)
    coro2 = coro**2
    y1_2, y1_3, y1_4, y1_5, y1_6 = [y1**i for i in (2, 3, 4, 5, 6)]
    y2_2, y2_3, y2_4, y2_5, y2_6 = [y2**i for i in (2, 3, 4, 5, 6)]
    y3_2, y3_3, y3_4, y3_5, y3_6 = [y3**i for i in (2, 3, 4, 5, 6)]
    y4_2, y4_3, y4_4, y4_5, y4_6 = [y4**i for i in (2, 3, 4, 5, 6)]
    y5_2, y5_3, y5_4, y5_5, y5_6 = [y5**i for i in (2, 3, 4, 5, 6)]
    (
        f0a555555,
        f1a555555,
        f2a555555,
        f0a444444,
        f1a444444,
        f2a444444,
        f0a335555,
        f1a335555,
        f2a335555,
        f0a334455,
        f1a334455,
        f2a334455,
        f0a334445,
        f1a334445,
        f2a334445,
        f0a333555,
        f1a333555,
        f2a333555,
        f0a333333,
        f1a333333,
        f2a333333,
        f0a244555,
        f1a244555,
        f2a244555,
        f0a244455,
        f1a244455,
        f2a244455,
        f0a233445,
        f1a233445,
        f2a233445,
        f0a233444,
        f1a233444,
        f2a233444,
        f0a233345,
        f1a233345,
        f2a233345,
        f0a233344,
        f1a233344,
        f2a233344,
        f0a233335,
        f1a233335,
        f2a233335,
        f0a223355,
        f1a223355,
        f2a223355,
        f0a222335,
        f1a222335,
        f2a222335,
        f0a222334,
        f1a222334,
        f2a222334,
        f0a222333,
        f1a222333,
        f2a222333,
        f0a222255,
        f1a222255,
        f2a222255,
        f0a222245,
        f1a222245,
        f2a222245,
        f0a222233,
        f1a222233,
        f2a222233,
        f0a222224,
        f1a222224,
        f2a222224,
        f0a145555,
        f1a145555,
        f2a145555,
        f0a134444,
        f1a134444,
        f2a134444,
        f0a133444,
        f1a133444,
        f2a133444,
        f0a133345,
        f1a133345,
        f2a133345,
        f0a133334,
        f1a133334,
        f2a133334,
        f0a133333,
        f1a133333,
        f2a133333,
        f0a124555,
        f1a124555,
        f2a124555,
        f0a124455,
        f1a124455,
        f2a124455,
        f0a123455,
        f1a123455,
        f2a123455,
        f0a123345,
        f1a123345,
        f2a123345,
        f0a113555,
        f1a113555,
        f2a113555,
        f0a113345,
        f1a113345,
        f2a113345,
        f0a112355,
        f1a112355,
        f2a112355,
        f0a112335,
        f1a112335,
        f2a112335,
        f0a112233,
        f1a112233,
        f2a112233,
        f0a111444,
        f1a111444,
        f2a111444,
        f0a111234,
        f1a111234,
        f2a111234,
        f0a111233,
        f1a111233,
        f2a111233,
        f0a111123,
        f1a111123,
        f2a111123,
    ) = force

    fea555555 = f0a555555 + f1a555555 * coro + f2a555555 * coro2
    fea444444 = f0a444444 + f1a444444 * coro + f2a444444 * coro2
    fea335555 = f0a335555 + f1a335555 * coro + f2a335555 * coro2
    fea334455 = f0a334455 + f1a334455 * coro + f2a334455 * coro2
    fea334445 = f0a334445 + f1a334445 * coro + f2a334445 * coro2
    fea333555 = f0a333555 + f1a333555 * coro + f2a333555 * coro2
    fea333333 = f0a333333 + f1a333333 * coro + f2a333333 * coro2
    fea244555 = f0a244555 + f1a244555 * coro + f2a244555 * coro2
    fea244455 = f0a244455 + f1a244455 * coro + f2a244455 * coro2
    fea233445 = f0a233445 + f1a233445 * coro + f2a233445 * coro2
    fea233444 = f0a233444 + f1a233444 * coro + f2a233444 * coro2
    fea233345 = f0a233345 + f1a233345 * coro + f2a233345 * coro2
    fea233344 = f0a233344 + f1a233344 * coro + f2a233344 * coro2
    fea233335 = f0a233335 + f1a233335 * coro + f2a233335 * coro2
    fea223355 = f0a223355 + f1a223355 * coro + f2a223355 * coro2
    fea222335 = f0a222335 + f1a222335 * coro + f2a222335 * coro2
    fea222334 = f0a222334 + f1a222334 * coro + f2a222334 * coro2
    fea222333 = f0a222333 + f1a222333 * coro + f2a222333 * coro2
    fea222255 = f0a222255 + f1a222255 * coro + f2a222255 * coro2
    fea222245 = f0a222245 + f1a222245 * coro + f2a222245 * coro2
    fea222233 = f0a222233 + f1a222233 * coro + f2a222233 * coro2
    fea222224 = f0a222224 + f1a222224 * coro + f2a222224 * coro2
    fea145555 = f0a145555 + f1a145555 * coro + f2a145555 * coro2
    fea134444 = f0a134444 + f1a134444 * coro + f2a134444 * coro2
    fea133444 = f0a133444 + f1a133444 * coro + f2a133444 * coro2
    fea133345 = f0a133345 + f1a133345 * coro + f2a133345 * coro2
    fea133334 = f0a133334 + f1a133334 * coro + f2a133334 * coro2
    fea133333 = f0a133333 + f1a133333 * coro + f2a133333 * coro2
    fea124555 = f0a124555 + f1a124555 * coro + f2a124555 * coro2
    fea124455 = f0a124455 + f1a124455 * coro + f2a124455 * coro2
    fea123455 = f0a123455 + f1a123455 * coro + f2a123455 * coro2
    fea123345 = f0a123345 + f1a123345 * coro + f2a123345 * coro2
    fea113555 = f0a113555 + f1a113555 * coro + f2a113555 * coro2
    fea113345 = f0a113345 + f1a113345 * coro + f2a113345 * coro2
    fea112355 = f0a112355 + f1a112355 * coro + f2a112355 * coro2
    fea112335 = f0a112335 + f1a112335 * coro + f2a112335 * coro2
    fea112233 = f0a112233 + f1a112233 * coro + f2a112233 * coro2
    fea111444 = f0a111444 + f1a111444 * coro + f2a111444 * coro2
    fea111234 = f0a111234 + f1a111234 * coro + f2a111234 * coro2
    fea111233 = f0a111233 + f1a111233 * coro + f2a111233 * coro2
    fea111123 = f0a111123 + f1a111123 * coro + f2a111123 * coro2

    s3 = (
        (
            y2_3 * y4_3 * sqrt3
            - y2_3 * y4_2 * y5
            + y3_3 * y4_2 * y5
            - 5.0 / 3.0 * y2_3 * y4 * y5_2 * sqrt3
            + y3_3 * y4_3 * sqrt3
            - 5.0 / 3.0 * y3_3 * y4 * y5_2 * sqrt3
            - y2_3 * y5_3
            + y3_3 * y5_3
            - 8.0 / 3.0 * y1_3 * y4 * y5_2 * sqrt3
        )
        * fea333555
        + (
            y1_4 * y5_2 * sqrt3 / 2.0
            + y2_4 * y4 * y5
            + y2_4 * y4_2 * sqrt3 / 3.0
            + y3_4 * y4_2 * sqrt3 / 3.0
            - y3_4 * y4 * y5
            - y1_4 * y4_2 * sqrt3 / 6.0
        )
        * fea222245
        + (y1 * y3_5 + y1 * y2_5 + y2_5 * y3 + y1_5 * y3 + y1_5 * y2 + y2 * y3_5)
        * fea133333
        + (
            y1_4 * y3 * y4
            - 2.0 * y2_4 * y3 * y4
            + y1_4 * y2 * y4
            + y1 * y2_4 * y5 * sqrt3
            + y1 * y3_4 * y4
            - 2.0 * y2 * y3_4 * y4
            + y1_4 * y2 * y5 * sqrt3
            - y1 * y3_4 * y5 * sqrt3
            - y1_4 * y3 * y5 * sqrt3
            + y1 * y2_4 * y4
        )
        * fea133334
        + (-y1 * y2 * y3 * y4_3 / 3.0 + y1 * y2 * y3 * y4 * y5_2) * fea123455
    )

    s4 = (
        s3
        + (
            2.0 / 3.0 * sqrt3 * y1 * y2_2 * y3_2 * y4
            - y1_2 * y2_2 * y3 * y5
            - sqrt3 * y1_2 * y2_2 * y3 * y4 / 3.0
            + y1_2 * y2 * y3_2 * y5
            - sqrt3 * y1_2 * y2 * y3_2 * y4 / 3.0
        )
        * fea112335
        + (
            y1 * y2_2 * y3 * y5_2
            + y1 * y2 * y3_2 * y5_2
            + y1 * y2 * y3_2 * y4_2
            + y1 * y2_2 * y3 * y4_2
            + y1_2 * y2 * y3 * y4_2
            + y1_2 * y2 * y3 * y5_2
        )
        * fea112355
    )

    s2 = (
        s4
        + (
            y2_3 * y3_2 * y5
            - y1_3 * y2_2 * y5 / 2.0
            - y1_2 * y3_3 * y5 / 2.0
            - y2_2 * y3_3 * y5
            + y1_3 * y2_2 * y4 * sqrt3 / 2.0
            - y1_2 * y2_3 * y4 * sqrt3 / 2.0
            + y1_3 * y3_2 * y5 / 2.0
            + y1_2 * y2_3 * y5 / 2.0
            + y1_3 * y3_2 * y4 * sqrt3 / 2.0
            - y1_2 * y3_3 * y4 * sqrt3 / 2.0
        )
        * fea222335
        + (
            -(y1_2) * y2_2 * y5_2 * sqrt3 / 2.0
            - y1_2 * y3_2 * y5_2 * sqrt3 / 2.0
            - y1_2 * y2_2 * y4_2 * sqrt3 / 6.0
            - y1_2 * y2_2 * y4 * y5
            - 2.0 / 3.0 * y2_2 * y3_2 * y4_2 * sqrt3
            + y1_2 * y3_2 * y4 * y5
            - y1_2 * y3_2 * y4_2 * sqrt3 / 6.0
        )
        * fea113345
        + (
            y2_2 * y3_2 * y5_2
            + y2_2 * y3_2 * y4_2
            + y1_2 * y2_2 * y5_2
            + y1_2 * y3_2 * y4_2
            + y1_2 * y3_2 * y5_2
            + y1_2 * y2_2 * y4_2
        )
        * fea223355
    )

    s3 = (
        s2
        + (
            y1 * y2 * y3_2 * y4_2 * sqrt3 / 6.0
            + y1 * y2 * y3_2 * y4 * y5
            + y1 * y2 * y3_2 * y5_2 * sqrt3 / 2.0
            + 2.0 / 3.0 * y1_2 * y2 * y3 * y4_2 * sqrt3
            - y1 * y2_2 * y3 * y4 * y5
            + y1 * y2_2 * y3 * y4_2 * sqrt3 / 6.0
            + y1 * y2_2 * y3 * y5_2 * sqrt3 / 2.0
        )
        * fea123345
        + (
            -(y1_3) * y2_2 * y5 * sqrt3 / 2.0
            - y1_3 * y2_2 * y4 / 2.0
            - y1_3 * y3_2 * y4 / 2.0
            - y1_2 * y2_3 * y4 / 2.0
            + y1_3 * y3_2 * y5 * sqrt3 / 2.0
            - y1_2 * y3_3 * y4 / 2.0
            + y2_3 * y3_2 * y4
            - y1_2 * y2_3 * y5 * sqrt3 / 2.0
            + y2_2 * y3_3 * y4
            + y1_2 * y3_3 * y5 * sqrt3 / 2.0
        )
        * fea222334
        + (
            3.0 * y3_2 * y4_4
            + 5.0 / 2.0 * y1_2 * y5_4
            + y2_2 * y5_4
            + 3.0 * y2_2 * y4_4
            - 4.0 * y3_2 * y4 * y5_3 * sqrt3
            + y3_2 * y5_4
            + 9.0 * y1_2 * y4_2 * y5_2
            - 3.0 / 2.0 * y1_2 * y4_4
            + 4.0 * y2_2 * y4 * y5_3 * sqrt3
        )
        * fea335555
        + (y1_3 * y2_3 + y1_3 * y3_3 + y2_3 * y3_3) * fea222333
    )

    s4 = (
        s3
        + (
            y3 * y4_5 / 5.0
            - y2 * y4_4 * y5 * sqrt3 / 2.0
            - 2.0 / 5.0 * y1 * y4_5
            - 2.0 * y1 * y4_3 * y5_2
            - 3.0 / 10.0 * y2 * y5_5 * sqrt3
            + y3 * y4_3 * y5_2
            + y3 * y4_4 * y5 * sqrt3 / 2.0
            + y2 * y4_3 * y5_2
            + 3.0 / 10.0 * y3 * y5_5 * sqrt3
            + y2 * y4_5 / 5.0
        )
        * fea244455
        + (
            y2_5 * y4
            - 2.0 * y1_5 * y4
            - sqrt3 * y2_5 * y5
            + y3_5 * y4
            + sqrt3 * y3_5 * y5
        )
        * fea222224
    )

    s5 = (
        s4
        + (
            -y3 * y5_5 * sqrt3 / 5.0
            + y2 * y5_5 * sqrt3 / 5.0
            + y1 * y4 * y5_4
            - 7.0 / 15.0 * y2 * y4_5
            + y2 * y4_4 * y5 * sqrt3 / 3.0
            - y3 * y4_4 * y5 * sqrt3 / 3.0
            + y3 * y4 * y5_4
            + y2 * y4 * y5_4
            + 2.0 * y1 * y4_3 * y5_2
            - 7.0 / 15.0 * y3 * y4_5
            - y1 * y4_5 / 15.0
        )
        * fea145555
    )

    s1 = (
        s5
        + (
            -sqrt3 * y1 * y2 * y3_3 * y5 / 2.0
            + y1_3 * y2 * y3 * y4
            + sqrt3 * y1 * y2_3 * y3 * y5 / 2.0
            - y1 * y2_3 * y3 * y4 / 2.0
            - y1 * y2 * y3_3 * y4 / 2.0
        )
        * fea111234
        + (
            y3 * y4_4 * y5 / 3.0
            + y3 * y4_5 * sqrt3 / 18.0
            - y2 * y4_4 * y5 / 3.0
            - y2 * y4 * y5_4 * sqrt3 / 2.0
            - y3 * y4_2 * y5_3
            + 2.0 / 9.0 * y1 * y4_5 * sqrt3
            + y2 * y4_5 * sqrt3 / 18.0
            + y2 * y4_2 * y5_3
            - 2.0 / 3.0 * y1 * y4_3 * y5_2 * sqrt3
            - y3 * y4 * y5_4 * sqrt3 / 2.0
        )
        * fea244555
        + (
            y1 * y2 * y4_2 * y5_2
            - 3.0 / 4.0 * y2 * y3 * y4_4
            - y1 * y2 * y5_4
            - y1 * y3 * y5_4
            + 5.0 / 4.0 * y2 * y3 * y5_4
            + y1 * y3 * y4_2 * y5_2
            - 7.0 / 2.0 * y2 * y3 * y4_2 * y5_2
            - 2.0 * y1 * y2 * y4_3 * y5 * sqrt3
            + 2.0 * y1 * y3 * y4_3 * y5 * sqrt3
        )
        * fea124455
    )

    s3 = (
        s1
        + (y2_6 + y1_6 + y3_6) * fea333333
        + (y1 * y2_4 * y3 + y1_4 * y2 * y3 + y1 * y2 * y3_4) * fea111123
        + fea112233 * y1_2 * y2_2 * y3_2
        + (
            y1_4 * y4_2
            + y2_4 * y4_2
            + y2_4 * y5_2
            + y3_4 * y4_2
            + y1_4 * y5_2
            + y3_4 * y5_2
        )
        * fea222255
    )
    s4 = (
        s3
        + (
            3.0 * y1 * y3 * y5_4
            + y1 * y3 * y4_4
            + 9.0 * y2 * y3 * y4_2 * y5_2
            - 3.0 / 2.0 * y2 * y3 * y5_4
            - 4.0 * y1 * y3 * y4_3 * y5 * sqrt3
            + y1 * y2 * y4_4
            + 4.0 * y1 * y2 * y4_3 * y5 * sqrt3
            + 3.0 * y1 * y2 * y5_4
            + 5.0 / 2.0 * y2 * y3 * y4_4
        )
        * fea134444
        + (
            -y1 * y3_2 * y5_3 * sqrt3 / 3.0
            - 7.0 / 3.0 * y1_2 * y3 * y4 * y5_2
            + 5.0 / 3.0 * y1 * y2_2 * y4_2 * y5 * sqrt3
            - 13.0 / 3.0 * y2_2 * y3 * y4 * y5_2
            - 4.0 / 3.0 * y2 * y3_2 * y5_3 * sqrt3
            - 7.0 / 3.0 * y1_2 * y2 * y4 * y5_2
            - 16.0 / 3.0 * y1 * y3_2 * y4 * y5_2
            + 4.0 / 3.0 * y1_2 * y3 * y4_2 * y5 * sqrt3
            + 4.0 / 3.0 * y2_2 * y3 * y5_3 * sqrt3
            + 3.0 * y1_2 * y2 * y4_3
            + y2 * y3_2 * y4_3
            + y1 * y2_2 * y5_3 * sqrt3 / 3.0
            + y2_2 * y3 * y4_3
            - 13.0 / 3.0 * y2 * y3_2 * y4 * y5_2
            - 5.0 / 3.0 * y1 * y3_2 * y4_2 * y5 * sqrt3
            - 4.0 / 3.0 * y1_2 * y2 * y4_2 * y5 * sqrt3
            + 3.0 * y1_2 * y3 * y4_3
            - 16.0 / 3.0 * y1 * y2_2 * y4 * y5_2
        )
        * fea233444
    )

    s5 = (
        s4
        + (
            2.0 * y1 * y3_2 * y5_3
            + 4.0 * y2 * y3_2 * y5_3
            + 4.0 * y2_2 * y3 * y4 * y5_2 * sqrt3
            - 2.0 * y1 * y2_2 * y5_3
            + y1_2 * y3 * y4 * y5_2 * sqrt3
            + 6.0 * y1 * y3_2 * y4_2 * y5
            - 6.0 * y1 * y2_2 * y4_2 * y5
            - 3.0 * y1_2 * y3 * y4_2 * y5
            + y1_2 * y2 * y4 * y5_2 * sqrt3
            + 4.0 * y1 * y3_2 * y4 * y5_2 * sqrt3
            - 3.0 * y1_2 * y2 * y4_3 * sqrt3
            - 4.0 * y2_2 * y3 * y5_3
            + 3.0 * y1_2 * y2 * y4_2 * y5
            - y1_2 * y2 * y5_3
            + y1_2 * y3 * y5_3
            - 3.0 * y1_2 * y3 * y4_3 * sqrt3
            + 4.0 * y2 * y3_2 * y4 * y5_2 * sqrt3
            + 4.0 * y1 * y2_2 * y4 * y5_2 * sqrt3
        )
        * fea113555
    )

    s2 = (
        s5
        + (
            -2.0 / 3.0 * y3_2 * y4_4 * sqrt3
            - 3.0 / 2.0 * y1_2 * y4_2 * y5_2 * sqrt3
            - 3.0 / 4.0 * y1_2 * y5_4 * sqrt3
            - y2_2 * y4_3 * y5
            + 7.0 / 12.0 * y1_2 * y4_4 * sqrt3
            + y3_2 * y4_3 * y5
            + 3.0 * y3_2 * y4 * y5_3
            - 2.0 / 3.0 * y2_2 * y4_4 * sqrt3
            - 3.0 * y2_2 * y4 * y5_3
        )
        * fea334445
        + (
            -3.0 * y1 * y3 * y4_3 * y5
            + 2.0 / 3.0 * y1 * y2 * y5_4 * sqrt3
            - y1 * y3 * y4 * y5_3
            + 2.0 / 3.0 * y1 * y3 * y5_4 * sqrt3
            + 3.0 * y1 * y2 * y4_3 * y5
            - 7.0 / 12.0 * y2 * y3 * y5_4 * sqrt3
            + 3.0 / 2.0 * y2 * y3 * y4_2 * y5_2 * sqrt3
            + y1 * y2 * y4 * y5_3
            + 3.0 / 4.0 * y2 * y3 * y4_4 * sqrt3
        )
        * fea124555
        + (
            2.0 * y3_2 * y4 * y5_3 * sqrt3
            - 7.0 / 2.0 * y1_2 * y4_2 * y5_2
            + y2_2 * y4_2 * y5_2
            - y2_2 * y4_4
            - y3_2 * y4_4
            - 2.0 * y2_2 * y4 * y5_3 * sqrt3
            - 3.0 / 4.0 * y1_2 * y5_4
            + 5.0 / 4.0 * y1_2 * y4_4
            + y3_2 * y4_2 * y5_2
        )
        * fea334455
    )
    s3 = (
        s2
        + (-6.0 * y4_2 * y5_4 + 9.0 * y4_4 * y5_2 + y5_6) * fea555555
        + (
            y2 * y3_3 * y4_2
            + y2 * y3_3 * y5_2
            + y1 * y3_3 * y4_2
            + y1 * y2_3 * y4_2
            + y1_3 * y2 * y4_2
            + y1 * y2_3 * y5_2
            + y1_3 * y3 * y5_2
            + y1_3 * y3 * y4_2
            + y1_3 * y2 * y5_2
            + y2_3 * y3 * y4_2
            + y1 * y3_3 * y5_2
            + y2_3 * y3 * y5_2
        )
        * fea233344
        + (
            y1 * y2_3 * y5_2 * sqrt3 / 6.0
            - y2_3 * y3 * y5_2 * sqrt3 / 3.0
            - y2 * y3_3 * y5_2 * sqrt3 / 3.0
            + y1_3 * y2 * y4 * y5
            - y1_3 * y2 * y5_2 * sqrt3 / 3.0
            - y1_3 * y3 * y4 * y5
            - y1_3 * y3 * y5_2 * sqrt3 / 3.0
            - y1 * y3_3 * y4_2 * sqrt3 / 2.0
            + y1 * y3_3 * y5_2 * sqrt3 / 6.0
            - y2_3 * y3 * y4 * y5
            + y2 * y3_3 * y4 * y5
            - y1 * y2_3 * y4_2 * sqrt3 / 2.0
        )
        * fea233345
        + (
            -3.0 * y2_3 * y4 * y5_2
            + y3_3 * y4_3
            - 3.0 * y3_3 * y4 * y5_2
            - 3.0 * y1_3 * y4 * y5_2
            + y2_3 * y4_3
            + y1_3 * y4_3
        )
        * fea111444
        + (
            y1 * y2_3 * y3_2
            + y1_3 * y2_2 * y3
            + y1_2 * y2_3 * y3
            + y1 * y2_2 * y3_3
            + y1_2 * y2 * y3_3
            + y1_3 * y2 * y3_2
        )
        * fea111233
    )

    s4 = (
        s3
        + (9.0 * y4_2 * y5_4 - 6.0 * y4_4 * y5_2 + y4_6) * fea444444
        + (
            -5.0 / 3.0 * y1 * y2_2 * y4_2 * y5 * sqrt3
            + y1 * y2_2 * y4_3
            - 4.0 / 3.0 * y1_2 * y3 * y4_2 * y5 * sqrt3
            - 2.0 * y1_2 * y2 * y4_3
            - y1 * y2_2 * y5_3 * sqrt3 / 3.0
            + 4.0 / 3.0 * y2_2 * y3 * y4 * y5_2
            - 4.0 / 3.0 * y2_2 * y3 * y5_3 * sqrt3
            - 2.0 * y1_2 * y3 * y4_3
            + 7.0 / 3.0 * y1 * y2_2 * y4 * y5_2
            - 2.0 / 3.0 * y1_2 * y3 * y4 * y5_2
            + y1 * y3_2 * y4_3
            + 4.0 / 3.0 * y2 * y3_2 * y5_3 * sqrt3
            + y1 * y3_2 * y5_3 * sqrt3 / 3.0
            + 4.0 / 3.0 * y1_2 * y2 * y4_2 * y5 * sqrt3
            + 4.0 / 3.0 * y2 * y3_2 * y4 * y5_2
            + 5.0 / 3.0 * y1 * y3_2 * y4_2 * y5 * sqrt3
            - 2.0 / 3.0 * y1_2 * y2 * y4 * y5_2
            + 7.0 / 3.0 * y1 * y3_2 * y4 * y5_2
        )
        * fea133444
    )

    s5 = (
        s4
        + (
            -(y1_3) * y2 * y4 * y5
            + 2.0 / 3.0 * y2_3 * y3 * y5_2 * sqrt3
            + y1 * y3_3 * y4_2 * sqrt3 / 2.0
            + y1_3 * y3 * y4_2 * sqrt3 / 2.0
            + y1_3 * y3 * y5_2 * sqrt3 / 6.0
            + y1_3 * y2 * y5_2 * sqrt3 / 6.0
            + y1_3 * y3 * y4 * y5
            + y1 * y2_3 * y5_2 * sqrt3 / 6.0
            + y1_3 * y2 * y4_2 * sqrt3 / 2.0
            + 2.0 / 3.0 * y2 * y3_3 * y5_2 * sqrt3
            - y1 * y2_3 * y4 * y5
            + y1 * y2_3 * y4_2 * sqrt3 / 2.0
            + y1 * y3_3 * y5_2 * sqrt3 / 6.0
            + y1 * y3_3 * y4 * y5
        )
        * fea133345
    )

    v6 = (
        s5
        + (
            -(y2_2) * y3 * y4_2 * y5
            + y1_2 * y3 * y4 * y5_2 * sqrt3 / 3.0
            + y2 * y3_2 * y4_2 * y5
            + y2 * y3_2 * y5_3
            - y1 * y2_2 * y5_3
            + 4.0 / 3.0 * y2_2 * y3 * y4 * y5_2 * sqrt3
            + 4.0 / 3.0 * y2 * y3_2 * y4 * y5_2 * sqrt3
            - y1 * y2_2 * y4_2 * y5
            + 4.0 / 3.0 * y1 * y3_2 * y4 * y5_2 * sqrt3
            - y2_2 * y3 * y5_3
            + y1 * y3_2 * y5_3
            + y1_2 * y2 * y4 * y5_2 * sqrt3 / 3.0
            - y1_2 * y2 * y4_3 * sqrt3
            + y1 * y3_2 * y4_2 * y5
            - y1_2 * y3 * y4_3 * sqrt3
            + 4.0 / 3.0 * y1 * y2_2 * y4 * y5_2 * sqrt3
        )
        * fea233445
        + (
            y2 * y3_4 * y4 * sqrt3
            - y1_4 * y2 * y5
            + y2_4 * y3 * y4 * sqrt3
            - y1_4 * y3 * y4 * sqrt3
            + y2 * y3_4 * y5
            - 2.0 * y1 * y2_4 * y5
            + 2.0 * y1 * y3_4 * y5
            - y1_4 * y2 * y4 * sqrt3
            + y1_4 * y3 * y5
            - y2_4 * y3 * y5
        )
        * fea233335
        + (
            y2_2 * y3_4
            + y1_4 * y3_2
            + y1_2 * y2_4
            + y2_4 * y3_2
            + y1_2 * y3_4
            + y1_4 * y2_2
        )
        * fea222233
    )
    return v6
