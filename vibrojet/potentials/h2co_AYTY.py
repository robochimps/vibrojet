"""
Potential energy surface of formaldehyde H₂CO.

This module provides a Python implementation of the  potential energy surface
originally defined in the Fortran file `refpes_h2co.f90`, included in the
supplementary material of the manuscript:

Al-Refaie, A. F., Yachmenev, A., Tennyson, J.Yurchenko, S. N.,
"ExoMol line lists VIII: A variationally computed line list for hot formaldehyde",
Monthly Notices of the Royal Astronomical Society 448, 1704-1714 (2015).
https://doi.org/10.1093/mnras/stv091

**Units:**
- Distances must be provided in Ångströms.
- Angles must be provided in radians.
- The output energy is given in inverse centimeters (cm⁻¹)

**Example energy levels (in cm⁻¹):**
5772.59,  6939.88,  7021.66,  7272.69,  7518.62,
8099.94,  8195.16,  8266.85,  8439.41,  8491.56,
8554.97,  8615.92,  8678.34,  8771.51,  8772.56,
9011.44,  9244.25,  9253.58,  9358.23,  9447.63,
9509.23,  9597.97,  9659.65,  9708.45,  9713.89.
"""

from io import StringIO

import jax
import numpy as np
from jax import config
from jax import numpy as jnp

config.update("jax_enable_x64", True)

_params_eq = """
    f0CO   0 0 0 0 0 0	1.2
    f1CO   1 0 0 0 0 0	1.627441350E-002
    f2CO   2 0 0 0 0 0	5.921199500E-003
    f3CO   3 0 0 0 0 0	-4.124857090E-003
    f4CO   4 0 0 0 0 0	4.947398990E-003
    f0CH   0 0 0 0 0 0	1.1
    f1CH   0 1 0 0 0 0	2.087974320E-002
    f2CH   0 2 0 0 0 0	7.910605460E-003
    f3CH   0 3 0 0 0 0	3.412656190E-003
    f4CH   0 4 0 0 0 0	0
    f0HCO  0 0 0 0 0 0	2.13
    f1HCO  0 0 0 1 0 0	-1.036297090E-001
    f2HCO  0 0 0 2 0 0	-6.630078110E-003
    f3HCO  0 0 0 3 0 0	0
    f4HCO  0 0 0 4 0 0	0
"""


_params = """
    f_0_1     1 0 0 0 0 0	0.00000000000000E+000
    f_0_1     0 1 0 0 0 0	0.00000000000000E+000
    f_0_2     0 0 0 1 0 0	0.00000000000000E+000
    f_1_1     0 0 0 0 0 1	1.32397278812190E+004
    f_2_1     0 0 0 0 0 2	4.62796216876840E+003
    f_3_1     0 0 0 0 0 3	1.43947874209430E+003
    f_4_1     0 0 0 0 0 4	1.00675845546780E+003
    f_5_1     0 0 0 2 0 0	3.14026516862990E+004
    f_6_1     0 0 0 1 1 0	2.12642548616950E+004
    f_7_1     1 0 0 1 0 0	2.31718749589860E+004
    f_8_1     2 0 0 0 0 0	3.27391609334460E+005
    f_9_1     0 1 0 1 0 0	-2.48693918630270E+003
    f_10_1    0 1 0 0 1 0	-8.06126770453510E+003
    f_11_1    1 1 0 0 0 0	2.72495926477140E+004
    f_12_1    0 2 0 0 0 0	1.22305323407560E+005
    f_13_1    0 1 1 0 0 0	3.48439184131470E+003
    f_14_1    0 0 0 3 0 0	-1.46299822278570E+003
    f_15_1    0 0 0 2 1 0	1.56667623636590E+004
    f_16_1    1 0 0 2 0 0	-3.23132114932610E+004
    f_17_1    1 0 0 1 1 0	-3.21835946737680E+002
    f_18_1    2 0 0 1 0 0	-1.23884253976770E+004
    f_19_1    3 0 0 0 0 0	-4.06187581220780E+005
    f_20_1    0 1 0 2 0 0	-8.18959537490210E+003
    f_21_1    0 1 0 1 1 0	-8.16082916151240E+003
    f_22_1    0 1 0 0 2 0	-7.81713288597970E+003
    f_23_1    1 1 0 1 0 0	-2.34048842006960E+004
    f_24_1    1 1 0 0 1 0	8.42363624611000E+003
    f_25_1    2 1 0 0 0 0	-4.21065195091400E+004
    f_26_1    0 2 0 1 0 0	-2.83098961750030E+003
    f_27_2    0 0 2 1 0 0	-7.65394881024310E+003
    f_28_2    1 0 2 0 0 0	2.88051606206380E+004
    f_29_1    0 3 0 0 0 0	-1.19108190355330E+005
    f_30_1    0 1 1 1 0 0	2.15220446382530E+004
    f_31_1    1 1 1 0 0 0	-1.65970968247780E+004
    f_32_1    0 2 1 0 0 0	1.29450379545150E+003
    f_33_1    0 0 0 4 0 0	4.63426455365520E+002
    f_34_1    0 0 0 3 1 0	3.28419929613080E+003
    f_35_1    0 0 0 2 2 0	1.08116791362810E+004
    f_36_1    1 0 0 3 0 0	1.12776147374360E+004
    f_37_1    1 0 0 2 1 0	-1.12865599201550E+004
    f_38_1    2 0 0 2 0 0	4.19424044853620E+003
    f_39_1    2 0 0 1 1 0	8.67534444232210E+003
    f_40_1    3 0 0 1 0 0	2.65774337552840E+003
    f_41_1    4 0 0 0 0 0	2.27050085954330E+005
    f_42_1    0 1 0 3 0 0	2.68169161695140E+003
    f_43_1    0 1 0 2 1 0	7.60203104732340E+002
    f_44_1    0 1 0 1 2 0	4.20929731233760E+001
    f_45_1    0 1 0 0 3 0	3.75503893207770E+003
    f_46_1    1 1 0 2 0 0	1.57158585094890E+004
    f_47_1    1 1 0 0 2 0	1.83216187234840E+004
    f_48_1    2 1 0 1 0 0	3.65775496815280E+004
    f_49_1    3 1 0 0 0 0	5.86536704030640E+003
    f_50_1    0 2 0 2 0 0	-1.43227573103100E+004
    f_51_1    0 2 0 1 1 0	-1.82786253760170E+004
    f_52_1    0 2 0 0 2 0	-1.83837328749240E+004
    f_53_1    1 2 0 1 0 0	-1.84848273034500E+004
    f_54_1    2 2 0 0 0 0	9.53918373655770E+002
    f_55_1    0 3 0 1 0 0	-4.83006215755680E+003
    f_56_1    0 3 0 0 1 0	1.37758739230830E+003
    f_57_1    1 3 0 0 0 0	-9.06704278785010E+003
    f_58_1    0 4 0 0 0 0	7.15716089488180E+004
    f_59_1    0 1 1 2 0 0	2.34468672313600E+004
    f_60_1    0 1 1 1 1 0	4.39474974617080E+004
    f_61_1    1 1 1 1 0 0	8.51263343516930E+002
    f_62_1    2 1 1 0 0 0	2.51098130789630E+004
    f_63_1    0 2 1 1 0 0	4.53453687073570E+003
    f_64_1    0 2 1 0 1 0	1.30472486913250E+003
    f_65_1    1 2 1 0 0 0	-2.06336644478460E+003
    f_66_1    0 3 1 0 0 0	-4.33755260551220E+003
    f_67_1    0 5 0 0 0 0	-9.87204221157440E+004
    f_68_1    5 0 0 0 0 0	-1.60416269447200E+005
    f_69_1    0 0 0 5 0 0	-7.52185825175080E+002
    f_70_1    0 0 0 3 2 0	9.83384327347010E+003
    f_71_1    0 0 0 4 1 0	2.96038785810000E+003
    f_72_1    0 0 0 5 1 0	-7.14680157894440E+003
    f_73_1    0 0 0 2 0 1	-7.13162171717700E+003
    f_74_1    0 0 0 1 1 1	-5.95193424629080E+003
    f_75_1    1 0 0 1 0 1	7.03646581092430E+003
    f_76_1    2 0 0 0 0 1	-4.41931375606080E+004
    f_77_1    0 1 0 1 0 1	2.86444849789180E+003
    f_78_1    0 1 0 0 1 1	1.09663277017430E+003
    f_79_1    1 1 0 0 0 1	2.95743682283690E+003
    f_80_1    0 2 0 0 0 1	-1.96454782945060E+004
    f_81_1    0 1 1 0 0 1	1.11609177699580E+004
    f_82_1    0 0 0 3 0 1	-9.82535843441370E+003
    f_83_1    0 0 0 2 1 1	6.94693175889390E+003
    f_84_1    2 0 0 1 0 1	3.60450752651530E+003
    f_85_1    3 0 0 0 0 1	3.75660668274930E+004
    f_86_1    0 1 0 2 0 1	3.66662463037250E+003
    f_87_1    0 1 0 1 1 1	1.80938150019880E+003
    f_88_1    0 3 0 0 0 1	7.70754491331340E+003
    f_89_1    0 0 0 4 0 1	-6.75061057707150E+003
    f_90_1    0 0 0 3 1 1	1.84413793890860E+003
    f_91_1    1 0 0 2 1 1	1.06514531102170E+004
    f_92_1    0 1 0 3 0 1	5.94814799245200E+003
    f_93_1    0 1 0 0 3 1	-2.72852848134130E+004
    f_94_1    5 0 0 0 0 1	1.56767295174060E+005
    f_95_1    0 0 0 6 0 1	-1.48758329923770E+004
    f_96_1    0 0 0 2 0 2	-2.62752102776460E+003
    f_97_1    0 0 0 1 1 2	8.60364782303770E+003
    f_98_1    1 0 0 1 0 2	-4.75720478599960E+003
    f_99_1    2 0 0 0 0 2	-7.79163779598230E+003
    f_100_1   0 1 0 1 0 2	2.72781602622290E+003
    f_101_1   0 2 0 0 0 2	-8.37542210050850E+003
    f_102_1   0 1 1 0 0 2	7.61731027107120E+002
    f_103_1   0 1 0 1 1 2	2.29886268713510E+003
    f_104_1   0 1 0 0 2 2	1.17379357854950E+004
    f_105_1   0 0 0 2 2 2	3.70759004789010E+004
    f_106_1   2 0 0 1 1 2	-5.69266624197820E+004
    f_107_1   4 0 0 0 0 2	1.34953914461790E+005
    f_108_1   0 1 0 0 3 2	5.07998383770310E+004
    f_109_1   0 2 0 1 1 2	2.70934554559810E+004
    f_110_1   0 0 0 5 0 2	-2.09261078613780E+004
"""

ind_eq = np.genfromtxt(
    StringIO(_params_eq), usecols=(i for i in range(1, 7)), dtype=int
)
coefs_eq = np.genfromtxt(StringIO(_params_eq), usecols=(7), dtype=float)

ind1 = np.genfromtxt(StringIO(_params), usecols=(i for i in range(1, 7)), dtype=int)
coefs1 = np.genfromtxt(StringIO(_params), usecols=(7), dtype=float)

ind2 = np.array([(i, k, j, m, l, n) for (i, j, k, l, m, n) in ind1 if k != j or l != m])
coefs2 = np.array(
    [c for c, (i, j, k, l, m, n) in zip(coefs1, ind1) if k != j or l != m]
)
ind = np.concatenate((ind1, ind2), axis=0)
coefs = np.concatenate((coefs1, coefs2), axis=0)


def mep(cos_tau):
    costau = cos_tau + 1
    r0 = jnp.sum(
        jnp.array([c * costau**i for c, i in zip(coefs_eq[:5], ind_eq[:5, 0])]),
        axis=0,
    )
    r1 = jnp.sum(
        jnp.array([c * costau**i for c, i in zip(coefs_eq[5:10], ind_eq[5:10, 1])]),
        axis=0,
    )
    r2 = r1
    a1 = jnp.sum(
        jnp.array([c * costau**i for c, i in zip(coefs_eq[10:15], ind_eq[10:15, 3])]),
        axis=0,
    )
    a2 = a1
    return jnp.array([r0, r1, r2, a1, a2, cos_tau])


def poten(q):
    r0, r1, r2, a1, a2, cos_tau = q.T

    r0eq, r1eq, r2eq, a1eq, a2eq, cos_tau_eq = mep(cos_tau)
    costau = cos_tau + 1

    y = jnp.array(
        [
            1 - jnp.exp(-(r0 - r0eq)),
            1 - jnp.exp(-(r1 - r1eq)),
            1 - jnp.exp(-(r2 - r2eq)),
            a1 - a1eq,
            a2 - a2eq,
            costau,
        ]
    ).T
    v = jnp.sum(
        # jnp.array([c * jnp.prod(y**i, axis=-1) for c, i in zip(coefs, ind)]),
        jnp.array(
            [
                c
                * y[0] ** i[0]
                * y[1] ** i[1]
                * y[2] ** i[2]
                * y[3] ** i[3]
                * y[4] ** i[4]
                * y[5] ** i[5]
                for c, i in zip(coefs, ind)
            ]
        ),
        axis=0,
    )
    return v
